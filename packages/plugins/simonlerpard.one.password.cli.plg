<?xml version="1.0" standalone="yes"?>
<!DOCTYPE PLUGIN [
<!ENTITY name "simonlerpard.one.password.cli">
<!ENTITY author "Simon Lerpard">
<!ENTITY version "2024.08.26">
<!ENTITY launch "Settings/OPSettings">
<!ENTITY gitContentURL "https://raw.githubusercontent.com/simonlerpard/unraid-plugins/dev">
<!ENTITY pluginURL "&gitContentURL;/packages/plugins/&name;.plg">
<!ENTITY archiveURL "&gitContentURL;/packages/archive/&name;.txz">
<!ENTITY flash "/boot/config/plugins/&name;">
<!ENTITY MD5 "e7e39a692ce8ec02db1902bd908bc24c">
]>
<PLUGIN name="&name;" author="&author;" version="&version;" launch="&launch;" pluginURL="&pluginURL;" min="6.9.0" support="">

<CHANGES>
##&name;

###&version;
- initial release

</CHANGES>

<!-- 1Password CLI Tools for unRAID -->

<!-- PRE-INSTALL SCRIPT -->
<FILE Run="/bin/bash">
<INLINE>
# Remove old 'source' package when new is available
MD5=$(md5sum &flash;/&name;.txz 2&gt;/dev/null|grep -Po '^\S+')
if [[ $MD5 != &MD5; ]]; then
  rm -f &flash;/&name;*.txz
fi
</INLINE>
</FILE>

<FILE Run="/usr/bin/php">
<INLINE>
<![CDATA[
<?
  $version = parse_ini_file("/etc/unraid-version");

  if ( version_compare($version['version'],"6.9.0", "<") )
  {
    echo "***********************************************\n";
    echo "\n";
    echo "Requires Unraid version 6.9.0 or greater to run\n";
    echo "\n";
    echo "***********************************************\n";
    exit(1);
  }
?>
]]>
</INLINE>
</FILE>

<!-- SOURCE PACKAGE -->
<FILE Name="&flash;/&name;.txz" Run="upgradepkg --install-new --reinstall">
<URL>&archiveURL;</URL>
<MD5>&MD5;</MD5>
</FILE>

<!--
  1. Create a default config file if it doesn't exist.
  2. Check if a downloaded zip file exist from the config file
  3. Run installation script
-->

<FILE Run="/usr/bin/php">
<INLINE>
<![CDATA[
<?
echo "Configuring the plugin...\n";

$docroot                 = $docroot ?? $_SERVER['DOCUMENT_ROOT'] ?: "/usr/local/emhttp";
$pluginName              = "simonlerpard.one.password.cli";
$pluginRoot              = "$docroot/plugins/$pluginName";

require_once ("$pluginRoot/include/Plugin.php");

$plugin = new Plugin($pluginName, $pluginRoot);

$configFile = $plugin->get("config");

if (!file_exists($configFile)) {
  echo "Creating a new config file\n";
  file_put_contents($configFile, json_encode([]));
  $plugin->getConfig()->save();
} else {
  echo "Found existing config file\n";
}

$opFile = $plugin->getConfig()->get("op_cli_downloaded_file");
$shouldBeInstalled = $plugin->getConfig()->get("op_cli_downloaded_file") !== "none";

if (!empty($opFile) && $shouldBeInstalled && file_exists($opFile)) {
  echo "Found a local copy of the 1Password CLI. Installing it now...\n";
  $plugin->getInstaller()->setup(true);

  $accessToken = $plugin->getConfig()->get("op_cli_service_account_token");
  $vaultName = $plugin->getConfig()->get("op_vault_name");
  $vaultItem = $plugin->getConfig()->get("op_vault_item");

  if (!empty($accessToken) && !empty($vaultName) && !empty($vaultItem)) {
    echo "You've enabled keyfile decryption. Trying to use your keyfile from your vault.\n";
    $cmdCode;
    $cmdOutput = [];
    exec("OP_SERVICE_ACCOUNT_TOKEN=$accessToken op read '$vaultItem' --out-file '/root/keyfile_installed_from_plugin' --force", $cmdOutput, $cmdCode);
    if ($cmdCode !== 0) {
      echo "Somethign failed opening your vault. Debug info:\n";
      echo "Exit code: " . $cmdCode . "\n";
      echo "Shell output rows: " . json_encode($cmdOutput, JSON_PRETTY_PRINT) . "\n";
    } else {
      echo "Keyfile successfully fetched from your vault.\n";
    }
  }

} {
  echo "Go to the settings page to install the desired 1Password CLI version.\n";
}

echo "Configuration finished\n";



?>
]]>
</INLINE>
</FILE>

<!-- POST-INSTALL SCRIPT -->
<FILE Run="/bin/bash">
<INLINE>

echo ""
echo "-----------------------------------------------------------"
echo " Plugin &name; is installed."
echo " Version: &version;"
echo "-----------------------------------------------------------"
echo ""
</INLINE>
</FILE>

<!-- REMOVE SCRIPT -->
<FILE Run="/bin/bash" Method="remove">
<INLINE>
# Remove plugin related files
#rm -rf /boot/config/plugins/&name;

# Uninstall the 'source' package
removepkg &name;
</INLINE>
</FILE>

</PLUGIN>
